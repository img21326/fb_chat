// Code generated by MockGen. DO NOT EDIT.
// Source: repo/room/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	room "github.com/img21326/fb_chat/structure/room"
)

// MockRoomRepoInterface is a mock of RoomRepoInterface interface.
type MockRoomRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepoInterfaceMockRecorder
}

// MockRoomRepoInterfaceMockRecorder is the mock recorder for MockRoomRepoInterface.
type MockRoomRepoInterfaceMockRecorder struct {
	mock *MockRoomRepoInterface
}

// NewMockRoomRepoInterface creates a new mock instance.
func NewMockRoomRepoInterface(ctrl *gomock.Controller) *MockRoomRepoInterface {
	mock := &MockRoomRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRoomRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomRepoInterface) EXPECT() *MockRoomRepoInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRoomRepoInterface) Close(ctx context.Context, roomId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx, roomId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRoomRepoInterfaceMockRecorder) Close(ctx, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRoomRepoInterface)(nil).Close), ctx, roomId)
}

// Create mocks base method.
func (m *MockRoomRepoInterface) Create(ctx context.Context, room *room.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoomRepoInterfaceMockRecorder) Create(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoomRepoInterface)(nil).Create), ctx, room)
}

// FindByUserId mocks base method.
func (m *MockRoomRepoInterface) FindByUserId(ctx context.Context, userId uint) (*room.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].(*room.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRoomRepoInterfaceMockRecorder) FindByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRoomRepoInterface)(nil).FindByUserId), ctx, userId)
}
