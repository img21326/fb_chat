// Code generated by MockGen. DO NOT EDIT.
// Source: repo/wait/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWaitRepoInterface is a mock of WaitRepoInterface interface.
type MockWaitRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWaitRepoInterfaceMockRecorder
}

// MockWaitRepoInterfaceMockRecorder is the mock recorder for MockWaitRepoInterface.
type MockWaitRepoInterfaceMockRecorder struct {
	mock *MockWaitRepoInterface
}

// NewMockWaitRepoInterface creates a new mock instance.
func NewMockWaitRepoInterface(ctrl *gomock.Controller) *MockWaitRepoInterface {
	mock := &MockWaitRepoInterface{ctrl: ctrl}
	mock.recorder = &MockWaitRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaitRepoInterface) EXPECT() *MockWaitRepoInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWaitRepoInterface) Add(ctx context.Context, queueName string, clientID uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", ctx, queueName, clientID)
}

// Add indicates an expected call of Add.
func (mr *MockWaitRepoInterfaceMockRecorder) Add(ctx, queueName, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWaitRepoInterface)(nil).Add), ctx, queueName, clientID)
}

// Len mocks base method.
func (m *MockWaitRepoInterface) Len(ctx context.Context, queueName string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len", ctx, queueName)
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockWaitRepoInterfaceMockRecorder) Len(ctx, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockWaitRepoInterface)(nil).Len), ctx, queueName)
}

// Pop mocks base method.
func (m *MockWaitRepoInterface) Pop(ctx context.Context, queueName string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop", ctx, queueName)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop.
func (mr *MockWaitRepoInterfaceMockRecorder) Pop(ctx, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockWaitRepoInterface)(nil).Pop), ctx, queueName)
}
