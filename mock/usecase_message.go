// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/message/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	message "github.com/img21326/fb_chat/structure/message"
	pubmessage "github.com/img21326/fb_chat/structure/pub_message"
	client "github.com/img21326/fb_chat/ws/client"
)

// MockMessageUsecaseInterface is a mock of MessageUsecaseInterface interface.
type MockMessageUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUsecaseInterfaceMockRecorder
}

// MockMessageUsecaseInterfaceMockRecorder is the mock recorder for MockMessageUsecaseInterface.
type MockMessageUsecaseInterfaceMockRecorder struct {
	mock *MockMessageUsecaseInterface
}

// NewMockMessageUsecaseInterface creates a new mock instance.
func NewMockMessageUsecaseInterface(ctrl *gomock.Controller) *MockMessageUsecaseInterface {
	mock := &MockMessageUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockMessageUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUsecaseInterface) EXPECT() *MockMessageUsecaseInterfaceMockRecorder {
	return m.recorder
}

// GetOnlineClients mocks base method.
func (m *MockMessageUsecaseInterface) GetOnlineClients(senderID, receiverID uint) (*client.Client, *client.Client) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineClients", senderID, receiverID)
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(*client.Client)
	return ret0, ret1
}

// GetOnlineClients indicates an expected call of GetOnlineClients.
func (mr *MockMessageUsecaseInterfaceMockRecorder) GetOnlineClients(senderID, receiverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineClients", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).GetOnlineClients), senderID, receiverID)
}

// HandleClientOnMessage mocks base method.
func (m *MockMessageUsecaseInterface) HandleClientOnMessage(sender, receiver *client.Client, receiveMessage *pubmessage.PublishMessage, saveMessageChan chan *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleClientOnMessage", sender, receiver, receiveMessage, saveMessageChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleClientOnMessage indicates an expected call of HandleClientOnMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) HandleClientOnMessage(sender, receiver, receiveMessage, saveMessageChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleClientOnMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).HandleClientOnMessage), sender, receiver, receiveMessage, saveMessageChan)
}

// HandleLeaveMessage mocks base method.
func (m *MockMessageUsecaseInterface) HandleLeaveMessage(sender, receiver *client.Client, unRegisterFunc func(context.Context, *client.Client)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleLeaveMessage", sender, receiver, unRegisterFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleLeaveMessage indicates an expected call of HandleLeaveMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) HandleLeaveMessage(sender, receiver, unRegisterFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLeaveMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).HandleLeaveMessage), sender, receiver, unRegisterFunc)
}

// HandlePairSuccessMessage mocks base method.
func (m *MockMessageUsecaseInterface) HandlePairSuccessMessage(receiver *client.Client, receiveMessage *pubmessage.PublishMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePairSuccessMessage", receiver, receiveMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePairSuccessMessage indicates an expected call of HandlePairSuccessMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) HandlePairSuccessMessage(receiver, receiveMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePairSuccessMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).HandlePairSuccessMessage), receiver, receiveMessage)
}

// LastByMessageID mocks base method.
func (m *MockMessageUsecaseInterface) LastByMessageID(ctx context.Context, userID, lastMessageID uint, c int) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastByMessageID", ctx, userID, lastMessageID, c)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastByMessageID indicates an expected call of LastByMessageID.
func (mr *MockMessageUsecaseInterfaceMockRecorder) LastByMessageID(ctx, userID, lastMessageID, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastByMessageID", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).LastByMessageID), ctx, userID, lastMessageID, c)
}

// LastByUserID mocks base method.
func (m *MockMessageUsecaseInterface) LastByUserID(ctx context.Context, userID uint, c int) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastByUserID", ctx, userID, c)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastByUserID indicates an expected call of LastByUserID.
func (mr *MockMessageUsecaseInterfaceMockRecorder) LastByUserID(ctx, userID, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastByUserID", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).LastByUserID), ctx, userID, c)
}

// Save mocks base method.
func (m *MockMessageUsecaseInterface) Save(ctx context.Context, message *message.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", ctx, message)
}

// Save indicates an expected call of Save.
func (mr *MockMessageUsecaseInterfaceMockRecorder) Save(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).Save), ctx, message)
}
