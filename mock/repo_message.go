// Code generated by MockGen. DO NOT EDIT.
// Source: repo/message/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	message "github.com/img21326/fb_chat/structure/message"
)

// MockMessageRepoInterface is a mock of MessageRepoInterface interface.
type MockMessageRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepoInterfaceMockRecorder
}

// MockMessageRepoInterfaceMockRecorder is the mock recorder for MockMessageRepoInterface.
type MockMessageRepoInterfaceMockRecorder struct {
	mock *MockMessageRepoInterface
}

// NewMockMessageRepoInterface creates a new mock instance.
func NewMockMessageRepoInterface(ctrl *gomock.Controller) *MockMessageRepoInterface {
	mock := &MockMessageRepoInterface{ctrl: ctrl}
	mock.recorder = &MockMessageRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepoInterface) EXPECT() *MockMessageRepoInterfaceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockMessageRepoInterface) GetByID(ctx context.Context, ID uint) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMessageRepoInterfaceMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMessageRepoInterface)(nil).GetByID), ctx, ID)
}

// LastsByRoomID mocks base method.
func (m *MockMessageRepoInterface) LastsByRoomID(ctx context.Context, roomID uuid.UUID, c int) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastsByRoomID", ctx, roomID, c)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastsByRoomID indicates an expected call of LastsByRoomID.
func (mr *MockMessageRepoInterfaceMockRecorder) LastsByRoomID(ctx, roomID, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastsByRoomID", reflect.TypeOf((*MockMessageRepoInterface)(nil).LastsByRoomID), ctx, roomID, c)
}

// LastsByTime mocks base method.
func (m *MockMessageRepoInterface) LastsByTime(ctx context.Context, roomID uuid.UUID, t time.Time, c int) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastsByTime", ctx, roomID, t, c)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastsByTime indicates an expected call of LastsByTime.
func (mr *MockMessageRepoInterfaceMockRecorder) LastsByTime(ctx, roomID, t, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastsByTime", reflect.TypeOf((*MockMessageRepoInterface)(nil).LastsByTime), ctx, roomID, t, c)
}

// Save mocks base method.
func (m *MockMessageRepoInterface) Save(arg0 context.Context, arg1 *message.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", arg0, arg1)
}

// Save indicates an expected call of Save.
func (mr *MockMessageRepoInterfaceMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMessageRepoInterface)(nil).Save), arg0, arg1)
}
