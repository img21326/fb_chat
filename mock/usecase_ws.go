// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/ws/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	room "github.com/img21326/fb_chat/structure/room"
	client "github.com/img21326/fb_chat/ws/client"
)

// MockWebsocketUsecaseInterface is a mock of WebsocketUsecaseInterface interface.
type MockWebsocketUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketUsecaseInterfaceMockRecorder
}

// MockWebsocketUsecaseInterfaceMockRecorder is the mock recorder for MockWebsocketUsecaseInterface.
type MockWebsocketUsecaseInterfaceMockRecorder struct {
	mock *MockWebsocketUsecaseInterface
}

// NewMockWebsocketUsecaseInterface creates a new mock instance.
func NewMockWebsocketUsecaseInterface(ctrl *gomock.Controller) *MockWebsocketUsecaseInterface {
	mock := &MockWebsocketUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockWebsocketUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketUsecaseInterface) EXPECT() *MockWebsocketUsecaseInterfaceMockRecorder {
	return m.recorder
}

// FindRoomByUserId mocks base method.
func (m *MockWebsocketUsecaseInterface) FindRoomByUserId(ctx context.Context, userID uint) (*room.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoomByUserId", ctx, userID)
	ret0, _ := ret[0].(*room.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoomByUserId indicates an expected call of FindRoomByUserId.
func (mr *MockWebsocketUsecaseInterfaceMockRecorder) FindRoomByUserId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoomByUserId", reflect.TypeOf((*MockWebsocketUsecaseInterface)(nil).FindRoomByUserId), ctx, userID)
}

// Register mocks base method.
func (m *MockWebsocketUsecaseInterface) Register(ctx context.Context, client *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", ctx, client)
}

// Register indicates an expected call of Register.
func (mr *MockWebsocketUsecaseInterfaceMockRecorder) Register(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWebsocketUsecaseInterface)(nil).Register), ctx, client)
}

// UnRegister mocks base method.
func (m *MockWebsocketUsecaseInterface) UnRegister(ctx context.Context, client *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnRegister", ctx, client)
}

// UnRegister indicates an expected call of UnRegister.
func (mr *MockWebsocketUsecaseInterfaceMockRecorder) UnRegister(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegister", reflect.TypeOf((*MockWebsocketUsecaseInterface)(nil).UnRegister), ctx, client)
}
