// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/hub/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	message "github.com/img21326/fb_chat/repo/message"
	room "github.com/img21326/fb_chat/repo/room"
	user "github.com/img21326/fb_chat/repo/user"
	client "github.com/img21326/fb_chat/ws/client"
)

// MockHubUsecaseInterface is a mock of HubUsecaseInterface interface.
type MockHubUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHubUsecaseInterfaceMockRecorder
}

// MockHubUsecaseInterfaceMockRecorder is the mock recorder for MockHubUsecaseInterface.
type MockHubUsecaseInterfaceMockRecorder struct {
	mock *MockHubUsecaseInterface
}

// NewMockHubUsecaseInterface creates a new mock instance.
func NewMockHubUsecaseInterface(ctrl *gomock.Controller) *MockHubUsecaseInterface {
	mock := &MockHubUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockHubUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHubUsecaseInterface) EXPECT() *MockHubUsecaseInterfaceMockRecorder {
	return m.recorder
}

// AddUserToQueue mocks base method.
func (m *MockHubUsecaseInterface) AddUserToQueue(client *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUserToQueue", client)
}

// AddUserToQueue indicates an expected call of AddUserToQueue.
func (mr *MockHubUsecaseInterfaceMockRecorder) AddUserToQueue(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToQueue", reflect.TypeOf((*MockHubUsecaseInterface)(nil).AddUserToQueue), client)
}

// CloseRoom mocks base method.
func (m *MockHubUsecaseInterface) CloseRoom(uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRoom", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRoom indicates an expected call of CloseRoom.
func (mr *MockHubUsecaseInterfaceMockRecorder) CloseRoom(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRoom", reflect.TypeOf((*MockHubUsecaseInterface)(nil).CloseRoom), uuid)
}

// CreateRoom mocks base method.
func (m *MockHubUsecaseInterface) CreateRoom(arg0 *room.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockHubUsecaseInterfaceMockRecorder) CreateRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockHubUsecaseInterface)(nil).CreateRoom), arg0)
}

// DeleteuserFromQueue mocks base method.
func (m *MockHubUsecaseInterface) DeleteuserFromQueue(client *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteuserFromQueue", client)
}

// DeleteuserFromQueue indicates an expected call of DeleteuserFromQueue.
func (mr *MockHubUsecaseInterfaceMockRecorder) DeleteuserFromQueue(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteuserFromQueue", reflect.TypeOf((*MockHubUsecaseInterface)(nil).DeleteuserFromQueue), client)
}

// FindOnlineUserByUserID mocks base method.
func (m *MockHubUsecaseInterface) FindOnlineUserByUserID(userId uint) (*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOnlineUserByUserID", userId)
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOnlineUserByUserID indicates an expected call of FindOnlineUserByUserID.
func (mr *MockHubUsecaseInterfaceMockRecorder) FindOnlineUserByUserID(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOnlineUserByUserID", reflect.TypeOf((*MockHubUsecaseInterface)(nil).FindOnlineUserByUserID), userId)
}

// FindRoomByUserId mocks base method.
func (m *MockHubUsecaseInterface) FindRoomByUserId(userId uint) (*room.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoomByUserId", userId)
	ret0, _ := ret[0].(*room.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoomByUserId indicates an expected call of FindRoomByUserId.
func (mr *MockHubUsecaseInterfaceMockRecorder) FindRoomByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoomByUserId", reflect.TypeOf((*MockHubUsecaseInterface)(nil).FindRoomByUserId), userId)
}

// FindUserByFbID mocks base method.
func (m *MockHubUsecaseInterface) FindUserByFbID(FbId string) (*user.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByFbID", FbId)
	ret0, _ := ret[0].(*user.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByFbID indicates an expected call of FindUserByFbID.
func (mr *MockHubUsecaseInterfaceMockRecorder) FindUserByFbID(FbId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByFbID", reflect.TypeOf((*MockHubUsecaseInterface)(nil).FindUserByFbID), FbId)
}

// GetFirstQueueUser mocks base method.
func (m *MockHubUsecaseInterface) GetFirstQueueUser(_client *client.Client) (*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstQueueUser", _client)
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstQueueUser indicates an expected call of GetFirstQueueUser.
func (mr *MockHubUsecaseInterfaceMockRecorder) GetFirstQueueUser(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstQueueUser", reflect.TypeOf((*MockHubUsecaseInterface)(nil).GetFirstQueueUser), client)
}

// RegisterOnline mocks base method.
func (m *MockHubUsecaseInterface) RegisterOnline(client *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterOnline", client)
}

// RegisterOnline indicates an expected call of RegisterOnline.
func (mr *MockHubUsecaseInterfaceMockRecorder) RegisterOnline(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOnline", reflect.TypeOf((*MockHubUsecaseInterface)(nil).RegisterOnline), client)
}

// SaveMesssage mocks base method.
func (m *MockHubUsecaseInterface) SaveMesssage(arg0 context.Context, arg1 *message.MessageModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveMesssage", arg0, arg1)
}

// SaveMesssage indicates an expected call of SaveMesssage.
func (mr *MockHubUsecaseInterfaceMockRecorder) SaveMesssage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMesssage", reflect.TypeOf((*MockHubUsecaseInterface)(nil).SaveMesssage), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockHubUsecaseInterface) SendMessage(arg0 context.Context, arg1 message.PublishMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockHubUsecaseInterfaceMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockHubUsecaseInterface)(nil).SendMessage), arg0, arg1)
}

// UnRegisterOnline mocks base method.
func (m *MockHubUsecaseInterface) UnRegisterOnline(client *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnRegisterOnline", client)
}

// UnRegisterOnline indicates an expected call of UnRegisterOnline.
func (mr *MockHubUsecaseInterfaceMockRecorder) UnRegisterOnline(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterOnline", reflect.TypeOf((*MockHubUsecaseInterface)(nil).UnRegisterOnline), client)
}
