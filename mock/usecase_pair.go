// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/pair/interface.go

// Package main is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pubmessage "github.com/img21326/fb_chat/structure/pub_message"
	room "github.com/img21326/fb_chat/structure/room"
	client "github.com/img21326/fb_chat/ws/client"
)

// MockPairUsecaseInterface is a mock of PairUsecaseInterface interface.
type MockPairUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPairUsecaseInterfaceMockRecorder
}

// MockPairUsecaseInterfaceMockRecorder is the mock recorder for MockPairUsecaseInterface.
type MockPairUsecaseInterfaceMockRecorder struct {
	mock *MockPairUsecaseInterface
}

// NewMockPairUsecaseInterface creates a new mock instance.
func NewMockPairUsecaseInterface(ctrl *gomock.Controller) *MockPairUsecaseInterface {
	mock := &MockPairUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockPairUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPairUsecaseInterface) EXPECT() *MockPairUsecaseInterfaceMockRecorder {
	return m.recorder
}

// AddToQueue mocks base method.
func (m *MockPairUsecaseInterface) AddToQueue(ctx context.Context, client *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToQueue", ctx, client)
}

// AddToQueue indicates an expected call of AddToQueue.
func (mr *MockPairUsecaseInterfaceMockRecorder) AddToQueue(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToQueue", reflect.TypeOf((*MockPairUsecaseInterface)(nil).AddToQueue), ctx, client)
}

// PairSuccess mocks base method.
func (m *MockPairUsecaseInterface) PairSuccess(ctx context.Context, room *room.Room) (*pubmessage.PublishMessage, *pubmessage.PublishMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PairSuccess", ctx, room)
	ret0, _ := ret[0].(*pubmessage.PublishMessage)
	ret1, _ := ret[1].(*pubmessage.PublishMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PairSuccess indicates an expected call of PairSuccess.
func (mr *MockPairUsecaseInterfaceMockRecorder) PairSuccess(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PairSuccess", reflect.TypeOf((*MockPairUsecaseInterface)(nil).PairSuccess), ctx, room)
}

// TryToPair mocks base method.
func (m *MockPairUsecaseInterface) TryToPair(ctx context.Context, client *client.Client) (*room.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToPair", ctx, client)
	ret0, _ := ret[0].(*room.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryToPair indicates an expected call of TryToPair.
func (mr *MockPairUsecaseInterfaceMockRecorder) TryToPair(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToPair", reflect.TypeOf((*MockPairUsecaseInterface)(nil).TryToPair), ctx, client)
}
